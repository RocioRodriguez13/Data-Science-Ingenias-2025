# -*- coding: utf-8 -*-
"""Análisis de Distribución de Estaciones de Servicio en CABA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NmGupMMDJQ0VLlG54ioDisMQXgGUACQv

# Objetivo del proyecto:
Objetivo del análisis: Evaluar la accesibilidad y la distribución de estaciones de servicio en la Ciudad Autónoma de Buenos Aires (CABA). Se busca analizar la ubicación y concentración de estaciones en los distintos barrios y comunas, con el fin de detectar zonas con alta o baja densidad de cobertura. Además, se pretende localizar áreas con escasa presencia de estaciones de servicio, lo cual podría representar una oportunidad estratégica para empresas interesadas en expandir su red comercial en zonas actualmente desatendidas.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

estaciones_df= pd.read_csv("/content/estaciones_servicio_caba.csv")

estaciones_df

"""# Informacion del dataset:

####Primeras cinco filas
"""

estaciones_df.head()

"""### Columnas del dataset

"""

estaciones_df.columns

"""###Informacion de la cantidad de colmnas y filas del dataset

"""

estaciones_df.shape

"""### Trabajo con datos nulos"""

print("\nCantidad de valores nulos por columna:")
print(estaciones_df.isnull().sum())

# Eliminar filas completamente vacías (si las hay)
estaciones_df = estaciones_df.dropna(how='all')

"""###Tipos de datos:

"""

print("\nTipos de datos:")
print(estaciones_df.dtypes)

"""###Cuantas estaciones hay en total

"""

estaciones_df['nombre'].value_counts()

"""####Aparecio "SIN MARCA" vamos a indagar más para ver si hay patrones entre ellas:

"""

sin_marca_df = estaciones_df[estaciones_df['nombre'] == 'SIN MARCA']
print(sin_marca_df)

#Donde estan ?
sin_marca_df['barrio'].value_counts()

#Que tipo de boca tienen?
sin_marca_df['tipo_de_boca'].value_counts()

"""Como encontre una categoria de nombre sin marca, decidi crear un nuevo dataframe sin ellas, por que no quiero que haga "ruido" mas adelante en la investigacion."""

estaciones_con_marca_df = estaciones_df[estaciones_df['nombre'] != 'SIN MARCA']
print("Estaciones con marca:", estaciones_con_marca_df.shape[0])
print("Estaciones SIN marca:", sin_marca_df.shape[0])

"""####¿Cuántas estaciones de YPF hay en total?

"""

estaciones_con_marca_df[estaciones_con_marca_df['nombre'] == 'YPF'].shape[0]

"""#Limpieza de datos:

Ahora a los datos faltantes, le agregaremos la etiqueta de "desconocido". Estos datos no nos interesan en nuestro proyecto. Asimismo, eliminaremos la altura, ya que con la longitud y latitud podemos inferir en su ubicacion.
"""

# Rellenar con "DESCONOCIDO" los campos que tienen pocos nulos
estaciones_con_marca_df['tipo_de_boca'] = estaciones_df['tipo_de_boca'].fillna('DESCONOCIDO')
estaciones_con_marca_df['barrio'] = estaciones_df['barrio'].fillna('DESCONOCIDO')
estaciones_con_marca_df['comuna'] = estaciones_df['comuna'].fillna('DESCONOCIDA')

# Eliminar columna que no vamos a usar
estaciones_con_marca_df.drop(columns=['calle_altura'], inplace=True)

# Verificar que todo quedó limpio
print("Nulos restantes:")
print(estaciones_con_marca_df.isnull().sum())

print("\nColumnas actuales:")
print(estaciones_con_marca_df.columns)

"""# Visualizacion de datos iniciales:

###Distribución de estaciones por comuna
"""

commune_distribution = estaciones_con_marca_df.groupby('comuna').size().reset_index(name='station_count')
sns.barplot(data=commune_distribution.sort_values('station_count', ascending=False), x='station_count', y='comuna')
plt.title("Cantidad de estaciones por comuna")
plt.xlabel("Cantidad")
plt.ylabel("Comuna")
plt.show()

"""### Top 10 barrios con mas cantidad de estaciones de servicio"""

estaciones_distribucion =estaciones_con_marca_df.groupby('barrio').size().reset_index(name='station_count')

# Estilo visual
sns.set(style='whitegrid')

# Tamaño del gráfico
plt.figure(figsize=(12, 6))

# Graficar el top 10 de barrios con más estaciones
top10_barrios = estaciones_distribucion.sort_values('station_count', ascending=False).head(10)
sns.barplot(data=top10_barrios, x='station_count', y='barrio', palette='viridis')

# Títulos y etiquetas
plt.title('Top 10 Barrios con Mayor Cantidad de Estaciones de Servicio', fontsize=20)
plt.xlabel('Cantidad de Estaciones', fontsize=16)
plt.ylabel('Barrio', fontsize=16)

# Mostrar gráfico
plt.show()

"""### Distribución geográfica de estaciones YPF

"""

# Filtrar solo YPF
df_ypf = estaciones_con_marca_df[estaciones_con_marca_df['nombre'].str.contains("YPF", case=False, na=False)]

sns.set(style='whitegrid')
plt.figure(figsize=(10, 8))
sns.scatterplot(data=df_ypf, x='long', y='lat', color='royalblue', s=60, alpha=0.6)
plt.title('Ubicación geográfica de estaciones YPF')
plt.xlabel('Longitud')
plt.ylabel('Latitud')
plt.show()

"""### Servicio más común"""

sns.set(style='whitegrid')

# Contar los tipos de boca
tipo_counts = estaciones_con_marca_df['tipo_de_boca'].value_counts().reset_index()
tipo_counts.columns = ['tipo_de_boca', 'cantidad']

# Crear el gráfico
plt.figure(figsize=(10, 6))
sns.barplot(data=tipo_counts, x='cantidad', y='tipo_de_boca', palette='mako')

# Etiquetas y título
plt.title('Tipos de Boca de Expendio Más Comunes', fontsize=18)
plt.xlabel('Cantidad', fontsize=14)
plt.ylabel('Tipo de Boca', fontsize=14)

# Mostrar gráfico
plt.tight_layout()
plt.show()

